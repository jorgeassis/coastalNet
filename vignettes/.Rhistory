bio <- worldclim_global(var = "bio", # "tmin", "tmax", "tavg", "prec", "wind", "vapr", or "bio"
res = 5, # resolution: 10, 5, 2.5, or 0.5 (minutes of a degree)
path = ".")
?worldclim_global
bio <- worldclim_global(var = "bio", # "tmin", "tmax", "tavg", "prec", "wind", "vapr", or "bio"
res = 5, # resolution: 10, 5, 2.5, or 0.5 (minutes of a degree)
path = "./")
list.files()
setwd("~/")
bio <- worldclim_global(var = "bio", # "tmin", "tmax", "tavg", "prec", "wind", "vapr", or "bio"
res = 5, # resolution: 10, 5, 2.5, or 0.5 (minutes of a degree)
path = "_ test")
names(bio)
plot(bio)
bioSubset <- bio[[3]]
plot(bioSubset)
bioSubset <- bio[[2]]
plot(bioSubset)
?worldclim_global
?cmip6_world
bioPresent <- worldclim_global(var = "bio", # "tmin", "tmax", "tavg", "prec", "wind", "vapr", or "bio"
res = 5)
bioPresent <- worldclim_global(var = "bio", # "tmin", "tmax", "tavg", "prec", "wind", "vapr", or "bio"
res = 10, # resolution: 10, 5, 2.5, or 0.5 (minutes of a degree)
path = "_ test")
names(bioPresent)
plot(bioPresent)
bioPresentSubset <- bioPresent[[2]]
plot(bioPresentSubset)
clim_fut <- cmip6_world( model="ACCESS-ESM1-5",
ssp="245",
time="2041-2060",
var="bioc",
download=F,
res=10,
path="_ test")
clim_fut
bioFuture <- cmip6_world( model="ACCESS-ESM1-5",
ssp="245",
time="2041-2060",
var="bioc",
download=F,
res=10,
path="_ test")
bioFutureSubset <- bioFuture[[2]]
plot(bioFutureSubset)
bioFutureSubset - bioPresentSubset
anomaly <- bioFutureSubset - bioPresentSubset
plot(anomaly)
?cmip6_world
setwd("/Users/jorgeassis/Dropbox/theMarineDataScientist/gitRepositories/coastalNet/Package Build/coastalNet/vignettes")
# Clean environment
closeAllConnections()
rm(list = ls())
gc(reset=TRUE)
# Load necessary libraries:
library(coastalNet)
library(rnaturalearth)
library(sf)
library(pheatmap)
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
# Explicitly set the CRS
region1 <- st_set_crs(region1, 4326)
region2 <- st_set_crs(region2, 4326)
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID(obj=region1, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
hexagonIDRegion2 <- getHexagonID(obj=region2, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
# Get hexagon IDs of the combined region
hexagonIDCombinedRange <- unique(c(unlist(hexagonIDRegion1),unlist(hexagonIDRegion2)))
# Get connectivity events for the study region (all years, all months, all days, 180 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDCombinedRange, period=180)
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents = connectivityEvents,hexagonIDFrom = hexagonIDRegion1,hexagonIDTo = hexagonIDRegion2,connType="Forward",value="Probability", steppingStone=FALSE)
# Get the connectivity matrix
pairwiseConnectivityRegions <- pairwiseConnectivity$connectivityMatrix
# Range of forward pairwise connectivity estimates
range(pairwiseConnectivityRegions)
# Heat map of pairwise connectivity
plot1 <- pheatmap(pairwiseConnectivityRegions, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
plot1
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(connectivityPairs=pairwiseConnectivity$connectivityPairs,hexagonCells=hexagonCells)
pairwiseConnectivity$connectivityPairs
region1
hexagonCells
# Get a data.frame of the location of hexagons for which oceanographic connectivity was retrieved
hexagonCellsConnected <- hexagonCells[hexagonCells$ID %in% unlist(hexagonIDCombinedRange),1]
hexagonCellsConnected <- st_coordinates(st_centroid(hexagonCellsConnected))
hexagonCellsConnected
hexagonIDCombinedRange
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = hexagonCellsConnected, featureName = as.character(hexagonIDCombinedRange) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
hexagonIDCombinedRange
as.character(hexagonIDCombinedRange)
hexagonCellsConnected
length(as.character(hexagonIDCombinedRange))
pairwiseConnectivity$connectivityPairs
nrow(pairwiseConnectivity$connectivityPairs)
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = hexagonCellsConnected, featureName = as.character(hexagonIDCombinedRange) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
obj = hexagonCellsConnected
featureName = as.character(hexagonIDCombinedRange)
connectivityPairs=pairwiseConnectivity$connectivityPairs
print=FALSE
if( is.null(connectivityEvents)) { stop("The connectivityPairs parameter is required.") }
if( is.null(obj)) { stop("The obj parameter is required.") }
if( ! "data.frame" %in% class(connectivityPairs) ) { stop("The connectivityPairs parameter must be of class data.frame.") }
if( ! "sf" %in% class(obj) & ! "data.frame" %in% class(obj)  & ! "matrix" %in% class(obj)  ) { stop("The obj parameter must be of class sf, data.frame or matrix") }
cat("\n")
cat("# ---------------------------------------------","\n")
cat("Map connectivity between pairs of sites","\n")
cat("# ---------------------------------------------","\n")
class(obj)
! "sf" %in% class(obj) & ("data.frame" %in% class(obj) | "matrix" %in% class(obj))
if( ncol(obj) != 2 ) { stop("The obj parameter must have two columns (i.e., longitude and latitude)") }
if( is.null(featureName)) { stop("The featureName parameter is required") }
if( ! "character" %in% class(featureName)) { stop("The featureName parameter must be of class character") }
if( length(featureName) != nrow(obj)) { stop("The featureName parameter must have the same number of elements as the obj parameter") }
coords <- obj
colnames(coords) <- c("X","Y")
coords$featureName <- featureName
coords
coords <- obj
colnames(coords) <- c("X","Y")
coords
class(coords)
devtools::unload("coastalNet")
remove.packages("coastalNet")
# Clean environment
closeAllConnections()
rm(list = ls())
gc(reset=TRUE)
# Load necessary libraries:
library(coastalNet)
library(rnaturalearth)
library(sf)
library(pheatmap)
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
# Explicitly set the CRS
region1 <- st_set_crs(region1, 4326)
region2 <- st_set_crs(region2, 4326)
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID(obj=region1, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
hexagonIDRegion2 <- getHexagonID(obj=region2, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
# Get hexagon IDs of the combined region
hexagonIDCombinedRange <- unique(c(unlist(hexagonIDRegion1),unlist(hexagonIDRegion2)))
# Get connectivity events for the study region (all years, all months, all days, 180 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDCombinedRange, period=180)
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents = connectivityEvents,hexagonIDFrom = hexagonIDRegion1,hexagonIDTo = hexagonIDRegion2,connType="Forward",value="Probability", steppingStone=FALSE)
# Get the connectivity matrix
pairwiseConnectivityRegions <- pairwiseConnectivity$connectivityMatrix
# Range of forward pairwise connectivity estimates
range(pairwiseConnectivityRegions)
# Heat map of pairwise connectivity
heatmap(pairwiseConnectivityRegions, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
# Get a data.frame of the location of hexagons for which oceanographic connectivity was retrieved
hexagonCellsConnected <- hexagonCells[hexagonCells$ID %in% unlist(hexagonIDCombinedRange),1]
hexagonCellsConnected <- st_coordinates(st_centroid(hexagonCellsConnected))
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = hexagonCellsConnected, featureName = as.character(hexagonIDCombinedRange) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
mappedConnectivity
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,mappedConnectivity$lineConnections)
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=2.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
library(ggplot)
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=2.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
library(ggplot2)
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=2.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
viridis
library(viridis)
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=2.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
devtools::unload("coastalNet")
# Clean R environment:
closeAllConnections()
rm(list = ls())
gc(reset = TRUE)
# Load necessary libraries:
library(sf)
library(terra)
library(ggplot2)
library(coastalNet)
library(lme4)
library(rnaturalearth)
library(viridis)
# Download files from repository
download.file("https://figshare.com/ndownloader/files/47592263", "Laminaria-ochroleuca-Coords.csv", quiet = TRUE, mode = "wb")
download.file("https://figshare.com/ndownloader/files/47592254", "Laminaria-ochroleuca-JostD.csv", quiet = TRUE, mode = "wb")
# Load data.frame containing coordinates (as longitude and longitude, WGS84) of sites sampled for the marine species Laminaria ochroleuca.
laminariaRecords <- read.csv("Laminaria-ochroleuca-Coords.csv", sep=";", header = TRUE)
# Load data.frame containing pairwise genetic differentiation estimates between coordinate sites
laminariaPopDifferentiation <- read.csv("Laminaria-ochroleuca-JostD.csv", sep=";", header = FALSE)
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Get hexagon IDs that define the study region
hexagonIDRegion <- getHexagonID(obj=laminariaRecords, hexagonCells=hexagonCells, level="extent", buffer=5, print=TRUE)
# Get all connectivity events within the study region (all years, all months, all days, 120 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDRegion, period=120 )
# Get hexagon IDs of the sampling sites
hexagonIDSites <- getHexagonID(obj=laminariaRecords, hexagonCells=hexagonCells, level="site", buffer=0, print=FALSE)
# Get pairwise connectivity estimates between sampling sites, with stepping-stone events across the strudy site
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents, hexagonIDFrom=hexagonIDSites, connType="Forward", value="Probability", steppingStone=TRUE)
# Produce and data.frame matching pairs of oceanographic connectivity and pairs of population differentiation
modelDataFrame <- data.frame()
for( from in 1:nrow(laminariaRecords)) {
for( to in 1:nrow(laminariaRecords)) {
if( from == to ) { next }
modelDataFrame <- rbind(modelDataFrame,data.frame(from = from, to = to, connectivity = mean(pairwiseConnectivity$connectivityMatrix[from,to], pairwiseConnectivity$connectivityMatrix[to,from], na.rm=T), differentiation = as.numeric(laminariaPopDifferentiation[from,to])))
}
}
# Remove zero connectivity values, missing values and Log-transform connectivity
modelDataFrame <- modelDataFrame[modelDataFrame$connectivity != 0 ,]
modelDataFrame <- modelDataFrame[complete.cases(modelDataFrame),]
modelDataFrame$connectivity <- log(modelDataFrame$connectivity)
# Model oceanographic connectivity to population differentiation
model <- lm(connectivity ~ differentiation, data = modelDataFrame)
r2 <- summary(model)$adj.r.squared
Pearson <- cor(modelDataFrame$connectivity, modelDataFrame$differentiation)
ggplot() +
geom_point(data = modelDataFrame, aes(x=connectivity, y=differentiation), color="#000000", fill="#000000", size=2 ) +
geom_point(data = modelDataFrame, aes(x=connectivity, y=differentiation), color="white", fill="white", size=1 ) +
geom_smooth(data = modelDataFrame, method=lm, aes(x=connectivity, y=differentiation), linetype = "dashed", fill="#c5593c", col='black', linewidth=0.5, alpha = 0.5) +
xlab(paste0("Oceanographic connectivity [ log(probability) ]")) + ylab("Population genetic differentiation (Jost D)") +
theme_minimal() +
theme( panel.grid.major = element_blank() ,
text = element_text(size=12) ,
axis.title.y = element_text(margin = margin(t = 0, r = 18, b = 0, l = 0)) ,
axis.title.x = element_text(margin = margin(t = 18, r = 0, b = 0, l = 0)) ,
legend.title = element_blank()) +
annotate("label", alpha = 0.5, label.padding=unit(0.5, "lines"), x = -77, y = 0.2, hjust=0,vjust=1 , label = paste0("Adjusted R2: ", format(round(r2, 3), nsmall = 3),"\nPearson's Corr.: ",format(round(Pearson, 3), nsmall = 3)))
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = laminariaRecords, featureName = unlist(hexagonIDSites) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
unlist(hexagonIDSites)
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = laminariaRecords, featureName = as.character(unlist(hexagonIDSites)) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,mappedConnectivity$lineConnections)
# Make a plot of the oceanographic connectivity between populations
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=3.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.75) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
# Clean environment
closeAllConnections()
rm(list = ls())
gc(reset=TRUE)
# Load necessary libraries:
library(coastalNet)
library(rnaturalearth)
library(viridis)
library(ggplot2)
library(sf)
# Download files from repository
download.file("https://figshare.com/ndownloader/files/47592251", "MPAEurope.RData", quiet = TRUE, mode = "wb")
# Load a polygon of class sf containing locations (WGS84) of Mediterranean Marine Protected Areas.
mediterraneanMPA <- loadRData("MPAEurope.RData")
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Get hexagon IDs that define the study region
hexagonIDRegion <- getHexagonID(obj=mediterraneanMPA, hexagonCells=hexagonCells, level="extent", buffer=6, print=TRUE)
# Get connectivity events for the study region (all years, all months, all days, 32 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDRegion, period=32 )
# Get hexagon IDs of the MPA sites
hexagonIDSites <- getHexagonID(obj=mediterraneanMPA, hexagonCells=hexagonCells, level="site", buffer=0, print=FALSE)
# Get pairwise connectivity estimates between MPA sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents, hexagonIDFrom=hexagonIDSites, connType="Forward", value="Probability", steppingStone=FALSE)
# Map oceanographic connectivity
mappedConnectivity <- mapConnectivity(obj = mediterraneanMPA, featureName = as.character(unlist(hexagonIDSites)) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,st_bbox(mappedConnectivity$lineConnections)[c(1,3,2,4)] + c(-5,5,-5,5))
# Make a plot of the oceanographic connectivity between populations
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=4) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=2) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 1 , aes(colour = Value)) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
# Clean environment
closeAllConnections()
rm(list = ls())
gc(reset=TRUE)
# Load necessary libraries:
library(coastalNet)
library(rnaturalearth)
library(viridis)
library(terra)
library(tidyterra)
library(gridExtra)
# Download files from repository
download.file("https://figshare.com/ndownloader/files/47592260", "presentDay.tif", quiet = TRUE, mode = "wb")
download.file("https://figshare.com/ndownloader/files/47592257", "Future.tif", quiet = TRUE, mode = "wb")
# Load raster layers with the present-day and projected (future, year 2100) distributions of the marine species Macrocystis pyrifera.
presentDayRangeRaster <- rast("presentDay.tif")
futureRangeRaster <- rast("Future.tif")
# Remove cells of no suitable habitats distribution
presentDayRangeRaster[presentDayRangeRaster == 0] <- NA
futureRangeRaster[futureRangeRaster == 0] <- NA
# Transform raster layers information to data.frame
presentDayRange <- crds(presentDayRangeRaster, na.rm=TRUE, df=TRUE)
futureRange <- crds(futureRangeRaster, na.rm=TRUE, df=TRUE)
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Combine the distribution records of present and future conditions
combinedRange <- unique(rbind(presentDayRange,futureRange))
# Get hexagon IDs that define the study region
hexagonIDRegion <- getHexagonID(obj=combinedRange, hexagonCells=hexagonCells, level="extent", buffer=5, print=TRUE)
# Get connectivity events for the study region (all years, all months, all days, 30 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDRegion, period=30 )
# Get hexagon IDs of the distribution sites
hexagonIDSitesFrom <- getHexagonID(obj=presentDayRange, hexagonCells=hexagonCells, level="site", buffer=0, print=FALSE)
hexagonIDSitesTo <- getHexagonID(obj=futureRange, hexagonCells=hexagonCells, level="site", buffer=0, print=FALSE)
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents, hexagonIDFrom=hexagonIDSitesFrom, hexagonIDTo=hexagonIDSitesTo, connType="Forward", value="Probability", steppingStone=FALSE)
# Find regions of probability zero
futureRangeConnected <- futureRange[which(apply(pairwiseConnectivity$connectivityMatrix,2,sum) != 0) ,]
futureRangeNotConnected <- futureRange[which(apply(pairwiseConnectivity$connectivityMatrix,2,sum) == 0),]
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,presentDayRangeRaster)
plot1 <- ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_point(data = presentDayRange, aes(x = x, y = y), colour = "#000000",size=2.5) +
geom_point(data = presentDayRange, aes(x = x, y = y), colour = "#FFFFFF",size=1) +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
plot2 <- ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_point(data = futureRange, aes(x = x, y = y), colour = "#000000",size=2.5) +
geom_point(data = futureRange, aes(x = x, y = y), colour = "#FFFFFF",size=1) +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
plot3 <- ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_point(data = futureRangeNotConnected, aes(x = x, y = y), colour = "#000000",size=2.5) +
geom_point(data = futureRangeNotConnected, aes(x = x, y = y), colour = "red",size=1) +
geom_point(data = futureRangeConnected, aes(x = x, y = y), colour = "#000000",size=2.5) +
geom_point(data = futureRangeConnected, aes(x = x, y = y), colour = "#6067f3",size=1) +
geom_point(data = presentDayRange, aes(x = x, y = y), colour = "#000000",size=2.5) +
geom_point(data = presentDayRange, aes(x = x, y = y), colour = "#FFFFFF",size=1) +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
grid.arrange(plot1, plot2, plot3, ncol = 3)
# Clean environment
closeAllConnections()
rm(list = ls())
gc(reset=TRUE)
# Load necessary libraries:
library(coastalNet)
library(rnaturalearth)
library(sf)
library(pheatmap)
library(ggplot2)
library(viridis)
oceanographicConnectivity <- getDataBase(fileName = "/Users/jorgeassis/Dropbox/Manuscripts/Connectivity patterns of west Africa turtles/Code/Database/connectivity.RData")
# Load hexagons (i.e., source and sink locations)
hexagonCells <- loadHexagons()
# Inspect the object hexagonCells
ggplot() +
geom_sf(data = hexagonCells, color="black") +
coord_sf(crs= "+proj=robin") +
theme_minimal()
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
# Explicitly set the CRS
region1 <- st_set_crs(region1, 4326)
region2 <- st_set_crs(region2, 4326)
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID(obj=region1, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
hexagonIDRegion2 <- getHexagonID(obj=region2, hexagonCells=hexagonCells, level="extent", buffer=0.5, print=TRUE)
# Get hexagon IDs of the combined region
hexagonIDCombinedRange <- unique(c(unlist(hexagonIDRegion1),unlist(hexagonIDRegion2)))
# Get connectivity events for the study region (all years, all months, all days, 180 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,hexagonID=hexagonIDCombinedRange, period=180)
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents = connectivityEvents,hexagonIDFrom = hexagonIDRegion1,hexagonIDTo = hexagonIDRegion2,connType="Forward",value="Probability", steppingStone=FALSE)
# Get the connectivity matrix
pairwiseConnectivityRegions <- pairwiseConnectivity$connectivityMatrix
# Range of forward pairwise connectivity estimates
range(pairwiseConnectivityRegions)
# Heat map of pairwise connectivity
heatmap(pairwiseConnectivityRegions, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
# Get a data.frame of the location of hexagons for which oceanographic connectivity was retrieved
hexagonCellsConnected <- hexagonCells[hexagonCells$ID %in% unlist(hexagonIDCombinedRange),1]
hexagonCellsConnected <- st_coordinates(st_centroid(hexagonCellsConnected))
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(obj = hexagonCellsConnected, featureName = as.character(hexagonIDCombinedRange) , connectivityPairs=pairwiseConnectivity$connectivityPairs)
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,mappedConnectivity$lineConnections)
ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#000000",size=2.5) +
geom_sf(data = mappedConnectivity$objCentroid, colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
