region1
class(region1)
getHexagonID
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sf(st_bbox(region1))
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
class(region1)
obj <- region1
as.data.frame(obj)[,1]
as.data.frame(obj)
obj
siteNames <- as.data.frame(obj)[,1]
siteNames
class(siteNames)
class(obj)[1] == "sfc_POLYGON"
siteNames <- as.data.frame(obj)[,1]
if( class(siteNames)[1] == "numeric" ) {
siteNames <- as.character(1:length(siteNames))
}  }
siteNames
class(siteNames)[1]
class(obj)
siteNames
nrow(siteNames)
length(siteNames)
nrow(obj)
sfc_POLYGON
siteNames
rbind(siteNames,siteNames)
c(siteNames,siteNames)
length(c(siteNames,siteNames))
class(obj)[1] == "sfc_POLYGON"
class(obj)[1]
obj
class(obj)
extend(obj)
extent(obj)
ext(obj)
st_bbox(obj)
as.numeric(st_bbox(obj) )[c(1,3,2,4)]
getwd()
devtools::unload("coastalNet")
remove.packages("coastalNet")
rm(list = ls())
closeAllConnections()
gc(reset=TRUE)
setwd("./coastalNet")
devtools::load_all()
devtools::document()
setwd("..")
# Alternatively, install the package from the GitHub repository
remotes::install_github("jorgeassis/coastalNet")
rm(list = ls())
gc(reset=TRUE)
library(coastalNet)
library(rnaturalearth)
library(sf)
# Load database
oceanographicConnectivity <- getDataBase(myFolder="Database", overwrite=FALSE)
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
# Explicitly set the CRS
region1 <- st_set_crs(region1, 4326)
region2 <- st_set_crs(region2, 4326)
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID(obj=region1, level="extent", buffer=0.5, print=TRUE)
getHexagonID
region1
class(region1)
obj <- region1
level="extent"
buffer=5
if( class(obj)[1] == "data.frame" ) { if ( ncol(obj) > 2 ) { siteNames <- obj[,3] } }
if( class(obj)[1] == "sf" | class(obj)[1] == "sfc_POLYGON" ) {
siteNames <- as.data.frame(obj)[,1]
if( class(siteNames)[1] == "sfc_POLYGON" | class(siteNames)[1] == "sfc" ) {
siteNames <- as.character(1:length(siteNames))
}
if( class(siteNames)[1] == "numeric" ) {
siteNames <- as.character(1:length(siteNames))
}  }
siteNames
level == "extent"
if( ! class(obj)[1] %in% c("SpatRaster","sf","data.frame","matrix","numeric") ) { stop("obj needs to be of class numeric, data.frame, matrix, sf or SpatRaster.") }
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix","numeric") ) { stop("obj needs to be of class numeric, data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) { obj <- as.numeric(as.vector(ext(obj))) }
if( class(obj)[1] == "sf" | class(obj)[1] == "sfc_POLYGON" | class(obj)[1] == "sfc" ) { obj <- as.numeric(st_bbox(obj) )[c(1,3,2,4)] }
if( class(obj)[1] == "Extent" ) { obj <- c(obj[1],obj[2],obj[3],obj[4]) }
if( class(obj)[1] == "matrix" | class(obj)[1] == "data.frame" ) { obj <- c(min(obj[,1]),max(obj[,1]),min(obj[,2]),max(obj[,2])) }
if( class(obj)[1] == "numeric" ) {
cellID <- referenceTable[ referenceTable$longitude >= obj[1] - buffer &
referenceTable$longitude <= obj[2] + buffer &
referenceTable$latitude >= obj[3] - buffer &
referenceTable$latitude <= obj[4] + buffer , "cellID"]
}
cellID
referenceTable
st_as_sf(referenceTable,coords=c("longitude", "latitude"), crs = 4326)
obj
obj <- region1
data("referenceTable")
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix") ) { stop("obj needs to be of class data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) {
obj <- crds(obj, na.rm=TRUE, df=TRUE)
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
cellID <- unique(cellID)
}
if( class(obj)[1] == "data.frame" | class(obj)[1] == "matrix" ) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
}
sf_use_s2(FALSE)
referenceTableSP <- st_as_sf(referenceTable,coords=c("longitude", "latitude"), crs = 4326)
cellID <- list()
st_crs(obj) <- st_crs(referenceTableSP)
referenceTableSP <- st_make_valid(referenceTableSP)
obj <- st_make_valid(obj)
nrow(obj)
obj
obj
class(obj)
st_sf(obj)
nrow(st_sf(obj))
class(st_sf(obj))
obj
class(obj)
data("referenceTable")
cat("\n")
cat("# ---------------------------------------------","\n")
cat("# Get the hexagon IDs based on spatial object","\n")
options(warn=-1)
if( class(obj)[1] == "data.frame" ) { if ( ncol(obj) > 2 ) { siteNames <- obj[,3] } }
if( class(obj)[1] == "sfc_POLYGON" | class(obj)[1] == "sfc" ) { obj <- st_sf(obj) }
class(obj)[1]
if( class(obj)[1] == "sf" ) {
siteNames <- as.data.frame(obj)[,1]
if( class(siteNames)[1] == "numeric" ) {
siteNames <- as.character(1:length(siteNames))
}  }
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix","numeric") ) { stop("obj needs to be of class numeric, data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) { obj <- as.numeric(as.vector(ext(obj))) }
as.numeric(st_bbox(obj) )[c(1,3,2,4)]
class(obj)
class(obj)[1]
sf_use_s2(FALSE)
referenceTableSP <- st_as_sf(referenceTable,coords=c("longitude", "latitude"), crs = 4326)
cellID <- list()
st_crs(obj) <- st_crs(referenceTableSP)
referenceTableSP <- st_make_valid(referenceTableSP)
obj <- st_make_valid(obj)
for( j in 1:nrow(obj)) {
obj.j <- obj[j,]
suppressMessages(intersected <- st_intersects(referenceTableSP, obj.j))
intersected <- data.frame(intersected)
if( nrow(intersected) > 0) { cellID <- c(cellID, list(referenceTable[intersected[,1], "cellID"] )) }
if( nrow(intersected) == 0) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix( st_coordinates(st_centroid( obj.j )) ), k=1 , algorithm="kd_tree" )$nn.index
cellID <- c(cellID, list( referenceTable[ closestCells , "cellID"] ) )
}
}
cellID
getHexagonID <- function(obj, level="extent", buffer=0, print=FALSE){
data("referenceTable")
cat("\n")
cat("# ---------------------------------------------","\n")
cat("# Get the hexagon IDs based on spatial object","\n")
options(warn=-1)
if( class(obj)[1] == "data.frame" ) { if ( ncol(obj) > 2 ) { siteNames <- obj[,3] } }
if( class(obj)[1] == "sfc_POLYGON" | class(obj)[1] == "sfc" ) { obj <- st_sf(obj) }
if( class(obj)[1] == "sf" ) {
siteNames <- as.data.frame(obj)[,1]
if( class(siteNames)[1] == "numeric" ) {
siteNames <- as.character(1:length(siteNames))
}  }
if( level == "extent" ) {
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix","numeric") ) { stop("obj needs to be of class numeric, data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) { obj <- as.numeric(as.vector(ext(obj))) }
if( class(obj)[1] == "sf" ) { obj <- as.numeric(st_bbox(obj) )[c(1,3,2,4)] }
if( class(obj)[1] == "Extent" ) { obj <- c(obj[1],obj[2],obj[3],obj[4]) }
if( class(obj)[1] == "matrix" | class(obj)[1] == "data.frame" ) { obj <- c(min(obj[,1]),max(obj[,1]),min(obj[,2]),max(obj[,2])) }
if( class(obj)[1] == "numeric" ) {
cellID <- referenceTable[ referenceTable$longitude >= obj[1] - buffer &
referenceTable$longitude <= obj[2] + buffer &
referenceTable$latitude >= obj[3] - buffer &
referenceTable$latitude <= obj[4] + buffer , "cellID"]
}
}
if( level == "site") {
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix") ) { stop("obj needs to be of class data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) {
obj <- crds(obj, na.rm=TRUE, df=TRUE)
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
cellID <- unique(cellID)
}
if( class(obj)[1] == "data.frame" | class(obj)[1] == "matrix" ) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
}
if( class(obj)[1] == "sf" ) {
sf_use_s2(FALSE)
referenceTableSP <- st_as_sf(referenceTable,coords=c("longitude", "latitude"), crs = 4326)
cellID <- list()
st_crs(obj) <- st_crs(referenceTableSP)
referenceTableSP <- st_make_valid(referenceTableSP)
obj <- st_make_valid(obj)
for( j in 1:nrow(obj)) {
obj.j <- obj[j,]
suppressMessages(intersected <- st_intersects(referenceTableSP, obj.j))
intersected <- data.frame(intersected)
if( nrow(intersected) > 0) { cellID <- c(cellID, list(referenceTable[intersected[,1], "cellID"] )) }
if( nrow(intersected) == 0) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix( st_coordinates(st_centroid( obj.j )) ), k=1 , algorithm="kd_tree" )$nn.index
cellID <- c(cellID, list( referenceTable[ closestCells , "cellID"] ) )
}
}
}
}
if( level == "centroid" ) {
if( ! class(obj)[1] %in% c("SpatRaster","sf","data.frame","matrix") ) { stop("obj needs to be of class data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "sf" ) {
obj <- st_centroid(obj)
obj <- data.frame(st_coordinates(obj))
}
if( class(obj)[1] == "SpatRaster" ) {
obj <- crds(obj, na.rm=TRUE, df=TRUE)
obj <- data.frame( x = mean(obj$x), y = mean(obj$y) )
}
if( class(obj)[1] == "data.frame" | class(obj)[1] == "matrix" ) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
}
}
if( print ) {
data("hexagonCells")
hexagonCellsID <- hexagonCells[hexagonCells$ID %in% unlist(cellID), 1]
plot1 <- ggplot() + geom_sf(data = hexagonCells, color="#b4b4b4", fill = "#b4b4b4") +
geom_sf(data = hexagonCellsID, color="black", fill = "black") +
coord_sf(crs= "+proj=robin") +
theme_minimal() +
theme(legend.position = "none")
print(plot1)
}
options(warn=0)
if( class(cellID) != "list" & (class(obj)[1] == "integer" | class(obj)[1] == "SpatRaster" | class(obj)[1] == "numeric" | class(obj)[1] == "data.frame" | class(obj)[1] == "matrix") ) { cellID <- as.list(cellID) }
if( class(cellID) != "list" & level == "centroid" ) { cellID <- as.list(cellID) }
if( exists("siteNames") ) { if( length(siteNames) == length(cellID) ) { names(cellID) <- siteNames } }
cat("# \n")
cat("# Number of hexagon sites:",length( unique(unlist(cellID)) ),"\n")
return(cellID)
}
# ---------------------------------------------
rm(list = ls())
gc(reset=TRUE)
library(coastalNet)
library(rnaturalearth)
library(sf)
# Load database
oceanographicConnectivity <- getDataBase(myFolder="Database", overwrite=FALSE)
# Define regions [lon-lat boxes]
region1 <- c(xmin = 3.3 , xmax = 4.1, ymin = 51.35, ymax = 51.95)
region2 <- c(xmin = 4.675, xmax = 8, ymin = 51.95, ymax = 55.5)
# Convert boxes to 'sf' object
region1 <- st_as_sfc(st_bbox(region1))
region2 <- st_as_sfc(st_bbox(region2))
# Explicitly set the CRS
region1 <- st_set_crs(region1, 4326)
region2 <- st_set_crs(region2, 4326)
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID(obj=region1, level="extent", buffer=0.5, print=TRUE)
getHexagonID
getHexagonID2 <- function(obj, level="extent", buffer=0, print=FALSE){
data("referenceTable")
cat("\n")
cat("# ---------------------------------------------","\n")
cat("# Get the hexagon IDs based on spatial object","\n")
options(warn=-1)
if( class(obj)[1] == "data.frame" ) { if ( ncol(obj) > 2 ) { siteNames <- obj[,3] } }
if( class(obj)[1] == "sfc_POLYGON" | class(obj)[1] == "sfc" ) { obj <- st_sf(obj) }
if( class(obj)[1] == "sf" ) {
siteNames <- as.data.frame(obj)[,1]
if( class(siteNames)[1] == "numeric" ) {
siteNames <- as.character(1:length(siteNames))
}  }
if( level == "extent" ) {
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix","numeric") ) { stop("obj needs to be of class numeric, data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) { obj <- as.numeric(as.vector(ext(obj))) }
if( class(obj)[1] == "sf" ) { obj <- as.numeric(st_bbox(obj) )[c(1,3,2,4)] }
if( class(obj)[1] == "Extent" ) { obj <- c(obj[1],obj[2],obj[3],obj[4]) }
if( class(obj)[1] == "matrix" | class(obj)[1] == "data.frame" ) { obj <- c(min(obj[,1]),max(obj[,1]),min(obj[,2]),max(obj[,2])) }
if( class(obj)[1] == "numeric" ) {
cellID <- referenceTable[ referenceTable$longitude >= obj[1] - buffer &
referenceTable$longitude <= obj[2] + buffer &
referenceTable$latitude >= obj[3] - buffer &
referenceTable$latitude <= obj[4] + buffer , "cellID"]
}
}
if( level == "site") {
if( ! class(obj)[1] %in% c("sfc","sfc_POLYGON","SpatRaster","sf","data.frame","matrix") ) { stop("obj needs to be of class data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "SpatRaster" ) {
obj <- crds(obj, na.rm=TRUE, df=TRUE)
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
cellID <- unique(cellID)
}
if( class(obj)[1] == "data.frame" | class(obj)[1] == "matrix" ) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
}
if( class(obj)[1] == "sf" ) {
sf_use_s2(FALSE)
referenceTableSP <- st_as_sf(referenceTable,coords=c("longitude", "latitude"), crs = 4326)
cellID <- list()
st_crs(obj) <- st_crs(referenceTableSP)
referenceTableSP <- st_make_valid(referenceTableSP)
obj <- st_make_valid(obj)
for( j in 1:nrow(obj)) {
obj.j <- obj[j,]
suppressMessages(intersected <- st_intersects(referenceTableSP, obj.j))
intersected <- data.frame(intersected)
if( nrow(intersected) > 0) { cellID <- c(cellID, list(referenceTable[intersected[,1], "cellID"] )) }
if( nrow(intersected) == 0) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix( st_coordinates(st_centroid( obj.j )) ), k=1 , algorithm="kd_tree" )$nn.index
cellID <- c(cellID, list( referenceTable[ closestCells , "cellID"] ) )
}
}
}
}
if( level == "centroid" ) {
if( ! class(obj)[1] %in% c("SpatRaster","sf","data.frame","matrix") ) { stop("obj needs to be of class data.frame, matrix, sf or SpatRaster.") }
if( class(obj)[1] == "sf" ) {
obj <- st_centroid(obj)
obj <- data.frame(st_coordinates(obj))
}
if( class(obj)[1] == "SpatRaster" ) {
obj <- crds(obj, na.rm=TRUE, df=TRUE)
obj <- data.frame( x = mean(obj$x), y = mean(obj$y) )
}
if( class(obj)[1] == "data.frame" | class(obj)[1] == "matrix" ) {
closestCells <- get.knnx( as.matrix(referenceTable[,2:3]) , as.matrix(obj), k=1 , algorithm="kd_tree" )$nn.index
cellID <- referenceTable[ closestCells , "cellID"]
}
}
if( print ) {
data("hexagonCells")
hexagonCellsID <- hexagonCells[hexagonCells$ID %in% unlist(cellID), 1]
plot1 <- ggplot() + geom_sf(data = hexagonCells, color="#b4b4b4", fill = "#b4b4b4") +
geom_sf(data = hexagonCellsID, color="black", fill = "black") +
coord_sf(crs= "+proj=robin") +
theme_minimal() +
theme(legend.position = "none")
print(plot1)
}
options(warn=0)
if( class(cellID) != "list" & (class(obj)[1] == "integer" | class(obj)[1] == "SpatRaster" | class(obj)[1] == "numeric" | class(obj)[1] == "data.frame" | class(obj)[1] == "matrix") ) { cellID <- as.list(cellID) }
if( class(cellID) != "list" & level == "centroid" ) { cellID <- as.list(cellID) }
if( exists("siteNames") ) { if( length(siteNames) == length(cellID) ) { names(cellID) <- siteNames } }
cat("# \n")
cat("# Number of hexagon sites:",length( unique(unlist(cellID)) ),"\n")
return(cellID)
}
# Get hexagon IDs that define the individual study regions, and the combined region
hexagonIDRegion1 <- getHexagonID2(obj=region1, level="extent", buffer=0.5, print=TRUE)
hexagonIDRegion2 <- getHexagonID2(obj=region2, level="extent", buffer=0.5, print=TRUE)
combinedRange <- unique(rbind(coastlines1f_filtered,coastlines2f_filtered))
hexagonIDRegion1
c(hexagonIDRegion1,hexagonIDRegion1)
hexagonIDCombinedRange <- c(hexagonIDRegion1,hexagonIDRegion2)
# Get connectivity events for the study region (all years, all months, all days, 180 days period)
connectivityEvents_f <- getConnectivityEvents(connectivity=oceanographicConnectivity,
hexagonID=hexagonIDCombinedRange, period=180)
# Get connectivity events for the study region (all years, all months, all days, 180 days period)
connectivityEvents <- getConnectivityEvents(connectivity=oceanographicConnectivity,
hexagonID=hexagonIDCombinedRange, period=180)
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity_f <- getPairwiseConnectivity(connectivityEvents = connectivityEvents,
hexagonIDFrom = hexagonIDRegion1,
hexagonIDTo = hexagonIDRegion2,
connType="Forward",
value="Probability", steppingStone=FALSE)
print(min(pairwiseConnectivity_f$connectivityPairs$Value))
# Get pairwise connectivity estimates between coordinate sites
pairwiseConnectivity <- getPairwiseConnectivity(connectivityEvents = connectivityEvents,
hexagonIDFrom = hexagonIDRegion1,
hexagonIDTo = hexagonIDRegion2,
connType="Forward",
value="Probability", steppingStone=FALSE)
pairwiseConnectivity
plot(pairwiseConnectivity$connectivityGraph)
mapConnectivity
raster(pairwiseConnectivity$connectivityMatrix)
raster::raster(pairwiseConnectivity$connectivityMatrix)
library(raster)
raster(pairwiseConnectivity$connectivityMatrix)
class(pairwiseConnectivity$connectivityMatrix)
raster(pairwiseConnectivity$connectivityMatrix)
rast(pairwiseConnectivity$connectivityMatrix)
terra::rast(pairwiseConnectivity$connectivityMatrix)
plot(terra::rast(pairwiseConnectivity$connectivityMatrix))
install.packages('pheatmap') # if not installed already
library(pheatmap)
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = T)
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = F)
?pheatmap
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, cluster_row = FALSE, legend = FALSE)
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, cluster_row = FALSE)
pairwiseConnectivityMatrix <- pairwiseConnectivity$connectivityMatrix
pairwiseConnectivityMatrix[pairwiseConnectivityMatrix == 0] <- NA
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, cluster_row = FALSE)
pairwiseConnectivityMatrix
pairwiseConnectivityMatrix <- pairwiseConnectivity$connectivityMatrix
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, cluster_row = FALSE)
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, cluster_row = FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, color = colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100), display_numbers = FALSE, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=90, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=180, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=45, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=270, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=315, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Example heatmap" )
pheatmap(pairwiseConnectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
# Map oceanographic connectivity between populations
mappedConnectivity_f <- mapConnectivity(connectivityPairs=pairwiseConnectivity$connectivityPairs)
mappedConnectivity_f
mappedConnectivity_f$hexagonCells
pairwiseConnectivity_f$connectivityPairs
pairwiseConnectivity_f$connectivityPairs$Value
range(pairwiseConnectivity_f$connectivityPairs$Value)
range(pairwiseConnectivity_f$connectivityPairs$Value)
hist(pairwiseConnectivity_f$connectivityPairs$Value)
# Heat map of pairwise connectivity
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
# Range of forward pairwise connectivity estimates
range(pairwiseConnectivity_f$connectivityPairs$Value)
# Heat map of pairwise connectivity
pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
# Map oceanographic connectivity between populations
mappedConnectivity <- mapConnectivity(connectivityPairs=pairwiseConnectivity$connectivityPairs)
pairwiseConnectivity$sitesConnected
pairwiseConnectivity$sitesConnected
hexagonCellsConnected <- hexagonCells[hexagonCells$ID %in% pairwiseConnectivity$sitesConnected,1]
hexagonCellsConnected <- st_coordinates(st_centroid(hexagonCellsConnected))
hexagonCellsConnected
mappedConnectivity$lineConnections
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearthdata")
# Load the worldmap and crop to the atudy region
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_crop(worldMap,mappedConnectivity$lineConnections)
plot1 <- ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_point(data = hexagonCellsConnected, aes(x = X, y = Y), colour = "#000000",size=2.5) +
geom_point(data = hexagonCellsConnected, aes(x = X, y = Y), colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
plot1
worldMap
hexagonCellsConnected
hexagonCells$ID
pairwiseConnectivity
hexagonIDCombinedRange
unlist(hexagonIDCombinedRange)
# Get a data.frame of the location of hexagons for which oceanographic connectivity was retrieved
hexagonCellsConnected <- hexagonCells[hexagonCells$ID %in% unlist(hexagonIDCombinedRange),1]
hexagonCellsConnected <- st_coordinates(st_centroid(hexagonCellsConnected))
plot1 <- ggplot() +
geom_sf(data = worldMap , fill="#CDCDCD", colour = "#9E9E9E" , size=0.25) +
geom_point(data = hexagonCellsConnected, aes(x = X, y = Y), colour = "#000000",size=2.5) +
geom_point(data = hexagonCellsConnected, aes(x = X, y = Y), colour = "#FFFFFF",size=1.25) +
geom_sf(data = mappedConnectivity$lineConnections , linewidth = 0.35 , aes(colour = Value), alpha=0.75) +
scale_color_gradientn(colours=rev(magma(6)),na.value = NA, trans = "log") +
theme_minimal() + theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(), legend.position = "none") +
coord_sf()
plot1
# Heat map of pairwise connectivity
plot1 <- pheatmap(pairwiseConnectivity$connectivityMatrix, display_numbers = FALSE, angle_col=0, cluster_row = FALSE, cluster_cols= FALSE, main = "Heatmap of pairwise connectivity" )
getwd()
devtools::unload("coastalNet")
remove.packages("coastalNet")
rm(list = ls())
closeAllConnections()
gc(reset=TRUE)
setwd("./coastalNet")
devtools::load_all()
devtools::document()
# Alternatively, install the package from the GitHub repository
remotes::install_github("jorgeassis/coastalNet")
